You are given 2 positive integers l and r. For any number x, all positive divisors of x except x are called the proper divisors of x.
A number is called special if it has exactly 2 proper divisors. For example:
The number 4 is special because it has proper divisors 1 and 2.
The number 6 is not special because it has proper divisors 1, 2, and 3.
Return the count of numbers in the range [l, r] that are not special.
Example 1:
Input: l = 5, r = 7
Output: 
Explanation
There are no special numbers in the range [5, 7].
Example 2:
Input: l = 4, r = 16
Output: 11
Explanation:
The special numbers in the range [4, 16] are 4 and 9.
Constraints:
1 <= l <= r <= 10^9

class Solution {
    public int nonSpecialCount(int l, int r) {
        int size = (int) Math.sqrt(r) + 1, special = 0;
        int[] prime = new int[size];

        for(int i = 2; i < size; i++){
            prime[i] = 1;
        }

        for(int i = 2; i * i < size; i++){
            if(prime[i] == 1){
                for(int j = i * i; j < size; j += i){
                    prime[j] = 0;
                }
            }
        }

        for(int i = 2; i < size; i++){
            if(prime[i] == 1){
                if(i * i >= l && i * i <= r){
                    special++;
                }
            }
        }

        return r - l + 1 - special;

    }
}

