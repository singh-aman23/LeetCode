You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1

class Solution {
    public int maxArea(int[] height) {
        int volume=0;
        int left = 0;
        int right = height.length-1;
        while(left<right){
            if((right-left)*min(height[left],height[right])>volume){
                volume = (right-left)*min(height[left],height[right]);
            }
            if(height[left]<height[right]){
                left++;
            }else{
                right--;
            }
        }
        return volume;

    }
    public static int min(int left,int right){
        if(left<right){
            return left;
        }
        return right;
    }
}

class Solution {
    public int maxArea(int[] height) {
        int low = 0, high = height.length - 1, minHeight = 0, maxWater = 0, currWater = 0;

        while(low < high){
            minHeight = Math.min(height[low], height[high]);
            currWater = minHeight * (high - low);
            maxWater = Math.max(currWater, maxWater);

            if(Math.min(height[low + 1], height[high]) > minHeight){
                low++;
            }else if(Math.min(height[low], height[high - 1]) > minHeight){
                high--;
            }else{
                if(height[high] <= height[low]){
                    high--;
                }else{
                    low++;
                }
            }
        }
        return maxWater;
    }
}
