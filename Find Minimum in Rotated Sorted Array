Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:
[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.
Example 1:
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times.

class Solution {
    public int findMin(int[] nums) {
        if(nums.length == 1){
            return nums[0];
        }
        int ans = Integer.MAX_VALUE, left = 0, right = nums.length - 1;
        while(left <= right){
            int mid = left + (right - left) / 2;
             if(left == right){
                Math.min(ans, nums[left]);
            }
            if(nums[mid] >= nums[left]){
                if(mid == left || mid == right){
                    int minNum = Math.min(nums[left], nums[right]);
                    return Math.min(ans, minNum);
                }
                ans = Math.min(ans, nums[left]);
                left = mid + 1;
            }else{
                ans = Math.min(ans, nums[mid]);
                right = mid - 1;
            }
        }
        return ans;
    }
}

class Solution {
    public int findMin(int[] nums) {
        int min = nums[0], left = 0, right = nums.length - 1, mid = 0;
        while(left <= right){
            mid = left + (right - left) / 2;
            if(nums[mid] <= min){
                min = nums[mid];
            }

            if(nums[left] <= nums[mid]){
                min = Math.min(min, nums[left]);
                left = mid + 1;
            }else if(nums[mid] <= nums[right]){
                min = Math.min(min, nums[mid]);
                right = mid - 1;
            }
        }
        return min;
    }
}
