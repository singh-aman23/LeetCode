Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105

import java.util.*;
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        HashSet <List<Integer>> listSet = new HashSet <> ();
        List <List<Integer>> ans = new ArrayList <> ();
        HashSet <Integer> numSet;
        List <Integer> list;

        for(int i = 0; i < nums.length - 2; i++){
            int target = -1 * nums[i];
            numSet = new HashSet <> ();
            list = new ArrayList <> ();

            for(int j = i + 1; j < nums.length; j++){
                if(numSet.contains(target - nums[j])){
                    list.add(nums[i]);
                    list.add(nums[j]);
                    list.add(target - nums[j]);
                    Collections.sort(list);
                    if(!listSet.contains(list)){
                        ans.add(list);
                        listSet.add(list);
                    }
                    list = new ArrayList <> ();
                }else{
                    numSet.add(nums[j]);
                }
            }
        }
        return ans;
    }
}

import java.util.*;
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List <List<Integer>> ans = new ArrayList <> ();
        List <Integer> list;
        int low = 0;
        while(low < nums.length - 2){
            int mid = low + 1, high = nums.length - 1;
            while(mid < high){
                int currSum = nums[low] + nums[mid] + nums[high];
                if(currSum <= 0){
                    if(currSum == 0){
                        list = new ArrayList <> ();
                        list.add(nums[low]);
                        list.add(nums[mid]);
                        list.add(nums[high]);
                        ans.add(list);
                    }
                    while(mid < high && nums[mid] == nums[mid + 1]) mid++;
                    mid++;
                }else{
                    while(mid < high && nums[high] == nums[high - 1]) high--;
                    high--;
                }
            }
            while(low < nums.length - 1 && nums[low] == nums[low + 1]) low++;
            low++;
        }
        return ans;
    }
}
