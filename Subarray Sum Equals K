Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107

import java.util.*;
class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap <Integer, Integer> map = new HashMap <> ();
        int[] pref = new int[nums.length];
        int count = 0, sum = 0;

        pref[0] = nums[0];
        for(int i = 1; i < nums.length; i++){
            pref[i] = pref[i - 1] + nums[i];
        }
        map.put(pref[0], 1);

        for(int i = 1; i < pref.length; i++){
            if(map.containsKey(pref[i] - k)){
                count += map.get(pref[i] - k);
            }
             map.put(pref[i], map.getOrDefault(pref[i], 0) + 1);
        }

        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            if(sum == k) count++;
        }
        return count;
    }
}
