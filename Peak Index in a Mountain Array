An array arr is a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.

Example 1:

Input: arr = [0,1,0]
Output: 1
Example 2:

Input: arr = [0,2,1,0]
Output: 1
Example 3:

Input: arr = [0,10,5,2]
Output: 1

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int left = 0;
        int right = arr.length - 1;
        int mid = 0;
        while(left <= right){
            mid = left + (right - left) / 2;
            if(mid == 0){
                return right;
            }
            if(arr[mid - 1] <= arr[mid] && arr[mid] >= arr[mid + 1]){
                return mid;
            }else if(arr[mid - 1] < arr[mid] && arr[mid] < arr[mid + 1]){
                left = mid + 1;
            }else{
                right = mid - 1;
            }
        }
        return mid;
    }
}

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        for(int i = 1; i < arr.length - 1; i++){
            if(arr[i + 1] < arr[i] && arr[i - 1] < arr[i]){
                return i;
            }
        }
        return 0;
    }
}
