Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

 

Example 1:


Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.
 

Constraints:

1 <= k <= points.length <= 104
-104 <= xi, yi <= 104

import java.util.*;
class Solution {
    public int[][] kClosest(int[][] points, int k) {
        HashMap <Integer, List<Integer>> map = new HashMap <> ();
        PriorityQueue <Integer> maxHeap = new PriorityQueue <>(Collections.reverseOrder());
        HashSet <Integer> set = new HashSet <> ();
        int[][] ans = new int[k][2];
        int index = 0;
        for(int i = 0; i < points.length; i++){
            int distance = dist(points[i][0], points[i][1]);
            if(map.containsKey(distance)){
                map.get(distance).add(i);
            }else{
                List <Integer> list = new ArrayList <> ();
                list.add(i);
                map.put(distance, list);
            }

        }
        for(int i = 0; i < points.length; i++){
            int distance = dist(points[i][0], points[i][1]);
            if(i < k){
                maxHeap.add(distance);
            }else{
                if(distance < maxHeap.peek()){
                    maxHeap.remove();
                    maxHeap.add(distance);
                }
            }
        }
        while(k > 0){
            int distance = maxHeap.remove();
            if(!set.contains(distance)){
                 set.add(distance);
                List <Integer> list = map.get(distance);    
            for(int j = 0; j < list.size(); j++){
                if(k == 0) break;
                ans[index][0] = points[list.get(j)][0];
                ans[index][1] = points[list.get(j)][1];
                index++;
                k--;
            }
            }
            
        }
        return ans;
    }

    public int dist(int x, int y){
        return x * x + y * y;
    } 
}
