There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

class Solution {
    public int search(int[] nums, int target) {
        int index1=-1,index2=-1,mark=0;
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]<nums[i+1]){
                mark++;
            }else{
                break;
            }
        }
        if(mark==nums.length-1){
            return binarySearch(0,nums.length-1,target,nums);
        }

        index1 = binarySearch(0,mark,target,nums);
        index2 = binarySearch(mark+1,nums.length-1,target,nums);

        if(index1!=-1){
            return index1;
        }else if(index2!=-1){
            return index2;
        }
        
        return -1;
    }

    public static int binarySearch(int left,int right,int target,int[] nums){
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }
        return -1;
    }
}
