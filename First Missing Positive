Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.

class Solution {
    public int firstMissingPositive(int[] nums) {
        for(int i = 0; i < nums.length; i++){
            if(nums[i] <= 0){
                nums[i] = Integer.MAX_VALUE;
            }
        }
        for(int i = 0; i < nums.length; i++){
            int number = 0;
            if(nums[i] < 0){
                number = -1 * nums[i];
            }else if(nums[i] > 0){
                number  = nums[i];
            }
            if(number <= nums.length && number != 0){
                if(nums[number - 1] > 0){
                     nums[number - 1] *= -1;
                }     
            }
        }

        for(int i = 1; i < nums.length + 1; i++){
            if(nums[i - 1] > 0){
                return i;
            }
        }

        return nums.length + 1;
    }
}

import java.util.*;
class Solution {
    public int firstMissingPositive(int[] nums) {
        Stack <Integer> stack = new Stack<>();
        stack.push(0);
        Arrays.sort(nums);
        int ans = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] > 0){
                if(stack.peek() != nums[i]){
                    stack.push(nums[i]);
                ans++;
                if(stack.peek() != ans){
                    return ans;
                }
             }    
            }
        }
        if(stack.size() == 0){
            return 1;
        }
        return stack.pop() + 1;
    }
}
