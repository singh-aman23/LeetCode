Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.
Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] prefixArr = new int[nums.length];
        int[] suffixArr = new int[nums.length];
        int[] ansArr = new int[nums.length];
        int preProduct = 1, sufProduct = 1;
        for(int i = 0; i < nums.length; i++){
            prefixArr[i] = preProduct;
            preProduct *= nums[i];
            suffixArr[nums.length - 1- i] = sufProduct;
            sufProduct *= nums[nums.length - 1- i];
        }
        for(int i = 0; i < nums.length; i++){
            ansArr[i] = prefixArr[i] * suffixArr[i];
        }
        return ansArr;
    }
}

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] preProd = new int[nums.length], postProd = new int[nums.length], answer = new int[nums.length];
        preProd[0]  = 1; postProd[nums.length - 1] = 1;
        for(int i = 1; i < nums.length; i++){
            preProd[i] = preProd[i - 1] * nums[i - 1];
            postProd[nums.length - 1 - i] = postProd[nums.length - i] * nums[nums.length - i];
        }
        for(int i = 0; i < nums.length; i++) answer[i] = preProd[i] * postProd[i];
        return answer;
    }
}

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] answer = new int[nums.length];
        int postProd = 1;
        answer[0]  = 1;
        for(int i = 1; i < nums.length; i++){
            answer[i] = answer[i - 1] * nums[i - 1];
        }
        for(int i = nums.length - 1; i > -1; i--){
            answer[i] *= postProd;
            postProd *= nums[i];
        } 
        return answer;
    }
}
