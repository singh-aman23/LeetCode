You are given a string s that consists of lower case English letters and brackets.
Reverse the strings in each pair of matching parentheses, starting from the innermost one.
Your result should not contain any brackets.
Example 1:
Input: s = "(abcd)"
Output: "dcba"
Example 2:
Input: s = "(u(love)i)"
Output: "iloveu"
Explanation: The substring "love" is reversed first, then the whole string is reversed.
Example 3:
Input: s = "(ed(et(oc))el)"
Output: "leetcode"
Explanation: First, we reverse the substring "oc", then "etco", and finally, the whole string.
Constraints:
1 <= s.length <= 2000
s only contains lower case English characters and parentheses.
It is guaranteed that all parentheses are balanced.

import java.util.*;
class Solution {
    public String reverseParentheses(String s) {
        Stack <Integer> stack = new Stack <> ();
        String ans = "";
        for(int i = 0; i < s.length(); i++){
            char chr = s.charAt(i);
            if(chr == '('){
                stack.push(i);
            }
            if(chr == ')'){
                int end = i;
                int start = stack.pop();
                s = revBetween(s,start, end);
            }
        }

        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) != '(' && s.charAt(i) != ')'){
                ans += "" + s.charAt(i);
            }
        }

        return ans;
    }

    private static String revBetween(String s, int start, int end){
        String rev = "", front = s.substring(0, start), back = s.substring(end + 1);
        while(start <= end){
            rev += "" + s.charAt(end);
            end--;
        }
        
        return front + rev + back;
    }

}
