You are given an integer array nums and an integer m.

Return the maximum product of the first and last elements of any subsequence of nums of size m.

 

Example 1:

Input: nums = [-1,-9,2,3,-2,-3,1], m = 1

Output: 81

Explanation:

The subsequence [-9] has the largest product of the first and last elements: -9 * -9 = 81. Therefore, the answer is 81.

Example 2:

Input: nums = [1,3,-5,5,6,-4], m = 3

Output: 20

Explanation:

The subsequence [-5, 6, -4] has the largest product of the first and last elements.

Example 3:

Input: nums = [2,-1,2,-6,5,2,-5,7], m = 2

Output: 35

Explanation:

The subsequence [5, 7] has the largest product of the first and last elements.

 

Constraints:

1 <= nums.length <= 105
-105 <= nums[i] <= 105
1 <= m <= nums.length

class Solution {
    public long maximumProduct(int[] nums, int m) {
        if(m == 1){
            long ans = nums[0] * nums[0];
            for(int i = 0; i < nums.length; i++){
                ans = Math.max(ans, (long)nums[i] * nums[i]);
            }
            return ans;
        }else{
            long ans = (long)nums[0] * nums[m  - 1];
            int max = nums[nums.length - 1], min = nums[nums.length - 1];
            int[] maxP = new int[nums.length], minP = new int[nums.length];
            for(int i = nums.length - 1; i > -1; i--){
                max = Math.max(max, nums[i]);
                min = Math.min(min, nums[i]);
                maxP[i] = max;
                minP[i] = min;
            }
            for(int i = 0; i + m - 1 < nums.length; i++){
                if(nums[i] >= 0){
                    ans = (long)Math.max((long)nums[i] * maxP[i + m - 1], ans);
                }else{
                    ans = (long)Math.max((long)nums[i] * minP[i + m - 1], ans);
                }
            }
            return ans;
        }
    }
}
