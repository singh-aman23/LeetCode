You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //equal digits
        ListNode head = new ListNode(0, null);
        ListNode temp = head, temp1 = l1, temp2 = l2;
        int carry = 0, sum = 0;
        while(temp1 != null && temp2 != null){
            sum = temp1.val + temp2.val + carry;
            carry = sum / 10;
            sum %= 10;
            temp.val = sum;
            if(temp1.next == null || temp2.next == null){
                break;
            }
            ListNode nextNode = new ListNode(0, null);
            temp.next = nextNode;
            temp = temp.next;
            temp1 = temp1.next;
            temp2 = temp2.next;
        }

        if(temp2.next != null && temp1.next == null){
            while(temp2.next != null){
                temp2 = temp2.next;
                sum = temp2.val + carry;
                carry = sum / 10;
                sum %= 10;
                ListNode nextNode = new ListNode(sum, null);
                temp.next = nextNode;
                temp = temp.next;
            }
        }else if(temp1.next != null && temp2.next == null){
            while(temp1.next != null){
            temp1 = temp1.next;
            sum = temp1.val + carry;
            carry = sum / 10;
            sum %= 10;
            ListNode nextNode = new ListNode(sum, null);
            temp.next = nextNode;
            temp = temp.next;
         }
        }    
        if(carry != 0){
            ListNode newNode = new ListNode(carry, null);
            temp.next = newNode;
           }    
        return head;
    }
}
