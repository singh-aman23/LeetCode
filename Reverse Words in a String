Given an input string s, reverse the order of the words.
A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.
Return a string of the words in reverse order concatenated by a single space.
Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

Example 1:
Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:
Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

Example 3:
Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.

Constraints:
1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
 
Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?

class Solution {
    public String reverseWords(String s) {
        String ans = removeExtraSpace(s);
        ans = reverse(ans, 0, ans.length() - 1);
        int j = 0;
        String finalString = "", helperString = "";
        while (j < ans.length()) {
            if (ans.charAt(j) == ' ') {
                finalString += reverse(helperString, 0, helperString.length() - 1) + " ";
                helperString = "";
            }else{
                helperString += ans.charAt(j) + "";
            }
            j++;
        }
        finalString += reverse(helperString, 0, helperString.length() - 1) + "";
        return finalString;
    }

    private static String removeExtraSpace(String s) {
        String ans = "";
        int start = 0, end = s.length() - 1, i = 0, j = s.length() - 1;
        while (s.charAt(i) == ' ') {
            start++;
            i++;
        }
        while (s.charAt(j) == ' ') {
            end--;
            j--;
        }

        ans += s.charAt(start) + "";
        for (i = start + 1; i <= end; i++) {
            if (s.charAt(i) == ' ') {
                if (s.charAt(i - 1) != ' ') {
                    ans += s.charAt(i) + "";
                }
            } else {
                ans += s.charAt(i) + "";
            }
        }
        return ans;
    }

    private static String reverse(String s, int start, int end) {
        String rev = "";
        for (int i = end; i >= start; i--) {
            rev += s.charAt(i) + "";
        }
        return rev;
    }
}
