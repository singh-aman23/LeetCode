ou are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].

class Solution {
    public int[] plusOne(int[] digits) {
        int carry = 0;
        digits[digits.length-1] = digits[digits.length-1]+1;
        for(int i=digits.length-1;i>0;i--){
            if(digits[i]>9){
                digits[i]=0;
                carry = 1;
                digits[i-1] = digits[i-1]+carry;
            }
        }
        if(digits[0]==10){
            int[] arr = new int[digits.length+1];
            arr[0] = 1;
            arr[1] = 0;
            for(int i=2;i<arr.length;i++){
                arr[i]=digits[i-1];
            }
            return arr;
        }
        return digits;
        }
    }

class Solution {
    public int[] plusOne(int[] digits) {
        int currDigit = digits.length - 1;
        while(currDigit > -1){
            if(digits[currDigit] != 9){
                digits[currDigit]++;
                return digits;
            }else{
                digits[currDigit] = 0;
                currDigit--;
            }
        }
        if(digits[0] == 0){
            int[] ansArray = new int[digits.length + 1];
            ansArray[0] = 1;
            for(int i = 0; i < digits.length; i++){
                ansArray[i + 1] = digits[i];
            } 
            return ansArray;
        }
        return digits;
    }
}
