You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

class Solution {
    public void rotate(int[][] matrix) {
        matrix = rotate(0, matrix.length - 1, matrix);
    }

     public static int[][] rotate(int left, int right, int[][] matrix){
    int top = left, bottom = right;
    if(left > right){
      return matrix;
    }
    //corners`
    int temp = matrix[top][left];
    matrix[left][top] = matrix[bottom][left];
    matrix[bottom][left] = matrix[bottom][right];
    matrix[bottom][right] = matrix[top][right];
    matrix[top][right] = temp;

     //middles
     for(int i = 1; i < right - left; i++){
      temp = matrix[top][left + i];
      matrix[top][left + i] = matrix[bottom - i][left];
      matrix[bottom - i][left] = matrix[bottom][right - i];
      matrix[bottom][right - i] = matrix[top + i][right];
      matrix[top + i][right] = temp;
     }
     return rotate(left + 1, right - 1, matrix);
  }
}

class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length, left = 0, right = 0;
        //transverse of matrix
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                if(i != j){
                    int temp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = temp;
                }
            }
        }

        //reversing rows
        for(int i = 0; i < n; i++){
            left = 0;
            right = n - 1;
            while(left < right){
                int temp = matrix[i][left];
                matrix[i][left] = matrix[i][right];
                matrix[i][right] = temp;
                left++;
                right--;
            }
        }

        
    }
}
