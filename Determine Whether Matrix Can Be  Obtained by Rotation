Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.
Example 1:

Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise to make mat equal target.
Example 2:

Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
Output: false
Explanation: It is impossible to make mat equal to target by rotating mat.
Example 3:

Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.

class Solution {
    public boolean findRotation(int[][] mat, int[][] target) {
        for(int i = 0; i < 4; i++){
            mat = rotate(mat);
            if(isEqual(mat, target)){
                return true;
            }
        }
        return false;
    }
    public static int[][] rotate(int[][] mat){
        int[][] rotMat = new int[mat.length][mat.length];
        for(int i = 0; i < rotMat.length; i++){
            for(int j = 0; j < rotMat.length; j++){
                rotMat[j][i] = mat[mat.length - 1 - i][j];
            }
        }
        return rotMat;
    }
    public static boolean isEqual(int[][] matrix, int[][] target){
        for(int i = 0; i < target.length; i++){
            for(int j = 0; j < target.length; j++){
                if(matrix[i][j] != target[i][j]){
                    return false;
                }
            }
        }
        return true;
    }
}
