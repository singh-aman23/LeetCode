Given the head of a linked list, remove the nth node from the end of the list and return its head.
Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:
Input: head = [1], n = 1
Output: []
Example 3:
Input: head = [1,2], n = 1
Output: [1]

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head.next == null){
            return null;
        }
        int size = 0, location = 0;
        ListNode tempNode = head;
        while(tempNode != null){
            size++;
            tempNode = tempNode.next;
        }
        location = size - n;
        tempNode = head;
        if(location == 0){
            //remove head
            head = head.next;
        }else if(location == size - 1){
            //remove last element
            ListNode nextNode = tempNode.next;
            while(nextNode.next != null){
                nextNode = nextNode.next;
                tempNode = tempNode.next;
            }
            tempNode.next = null;
        }else{
            int index = 0;
            while(index != location - 1){
                tempNode = tempNode.next;
                index++;
            }
            tempNode.next = tempNode.next.next;
        }
        return head;
    }
}
