Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

A good subarray is a subarray where:

its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:

A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
Example 2:

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
Example 3:

Input: nums = [23,2,6,4,7], k = 13
Output: false
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= sum(nums[i]) <= 231 - 1
1 <= k <= 231 - 1

import java.util.*;
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        if(nums.length < 2) return false;
        int[] pref = new int[nums.length];
        HashMap <Integer, Integer> map = new HashMap <> ();
        int sum = nums[0];
        pref[0] = nums[0];

        for(int i = 1; i < nums.length; i++){
            sum += nums[i];
            if(sum % k == 0) return true;
            pref[i] = pref[i - 1] + nums[i];
        }

        for(int i = 0; i < pref.length; i++){
            if(map.containsKey(pref[i] % k)){
                int lastIndex = map.get(pref[i] %  k);
                if(i - lastIndex > 1) return true;
            }else{
                map.put(pref[i] % k, i);
            }
        }
        return false;
    }
}
