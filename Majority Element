Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

class Solution {
    public int majorityElement(int[] nums) {
        int[] frequency = new int[nums.length];
        for(int i=0;i<nums.length;i++){
            int target = nums[i];
            int count = 1;
            for(int j=i+1;j<nums.length;j++){
                if(nums[j]==target){
                    count++;
                }
            }
            frequency[i] = count;
        }
        return nums[max(frequency)];
    }

    public static int max(int[] frequency){
        int maxElement = frequency[0];
        int maxIndex = 0;
        for(int i=1;i<frequency.length;i++){
            if(frequency[i]>maxElement){
                maxElement = frequency[i];
                maxIndex = i;
            }
        }
        return maxIndex;
    }
}

class Solution {
    public int majorityElement(int[] nums) {
        int num = 0, count = 0;
        for(int i = 0; i < nums.length; i++){
            count = 0;
            num = nums[i];
            for(int j = 0; j < nums.length; j++){
                if(nums[j] == num){
                    count++;
                }
            }
            if(count > nums.length / 2){
                break;
            }
        }
        return num;
    }
}

import java.util.*;
class Solution {
    public int majorityElement(int[] nums) {
        HashMap <Integer, Integer> map = new HashMap <> ();
        for(int i = 0; i < nums.length; i++){
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
            if(map.get(nums[i]) > nums.length / 2){
                return nums[i];
            }
        }
        return -1;
    }
}
