Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

SOLUTION 1:
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] index = {-1,-1};
        index[0] = binarySearch(nums,target);
        if(index[0]==-1){
            return index;
        }
        if(nums.length==1){
            index[0] = 0;
            index[1] = 0;
            return index;
        }       
        if(index[0]==0){
            if(nums[1]==target){
            index[1] = 1;
            }else{
                index[1]=index[0];
            }
            return index;
        }else if(index[0]==nums.length-1){
            if(nums[nums.length-2]==target){
            index[1] = nums.length-2;
            }else{
                index[1] = index[0];
            }
            return index;
        }
        int left = index[0]-1;
        int right = index[0]+1;
        index[1] = index[0];

        while(left!=-1){
            if(nums[left]==target){
                index[0]=left;
                left--;
            }else{
                break;
            }
        }
        while(right!=nums.length){
            if(nums[right]==target){
                index[1] = right;
                right++;
            }else{
                break;
            }
        }
        return index;        
    }
    public static int binarySearch(int[] nums, int target){
        int left = 0;
        int right = nums.length-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }
        return -1;
    }
}

SOLUTION 2:
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] index = {-1,-1};
        index[0] = binarySearch(nums,target);
        if(index[0]==-1){
            return index;
        }
       
        int left = index[0]-1;
        int right = index[0]+1;
        index[1] = index[0];

        while(left!=-1){
            if(nums[left]==target){
                index[0]=left;
                left--;
            }else{
                break;
            }
        }
        while(right!=nums.length){
            if(nums[right]==target){
                index[1] = right;
                right++;
            }else{
                break;
            }
        }
        return index;        
    }
    public static int binarySearch(int[] nums, int target){
        int left = 0;
        int right = nums.length-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }
        return -1;
    }
}

SOLUTION 3: 
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1,-1};
        if(nums.length == 0 || binarySearch(0, nums.length - 1, nums, target) == -1){
            return ans;
        }
        ans[0] =  binarySearch(0, nums.length - 1, nums, target);
        if(ans[0] != 0){
             while(ans[0] != 0){
            if(binarySearch(0, ans[0] - 1, nums, target) != -1){
                ans[0] = binarySearch(0, ans[0] - 1, nums, target);
            }else{
                break;
            }
          }
        }
        ans[1] =  binarySearch(0, nums.length - 1, nums, target);
        if(ans[1] != nums.length -1){
             while(ans[1] != nums.length-1){
            if(binarySearch(ans[1] + 1, nums.length - 1, nums, target) != -1){
                ans[1] = binarySearch(ans[1] + 1, nums.length - 1, nums, target);
            }else{
                break;
            }
        }
        }
    return ans;   
    }

    public int binarySearch(int left, int right, int[] nums, int target){
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] < target){
                left = mid + 1;
            }else{
                right = mid - 1;
            }
        }
        return -1;
    }
}

SOLUTION 4:
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1, -1};
        ans[0] = binarySearch(0, nums.length - 1, target, nums);
        ans[1] = binarySearch(0, nums.length - 1, target, nums);
        while(ans[0] != 0){
            if(binarySearch(0, ans[0] - 1, target, nums) != -1){
                ans[0] = binarySearch(0, ans[0] - 1, target, nums);
            }else{
                break;
            }
        }
        while(ans[1] != nums.length - 1){
            if(binarySearch(ans[1] + 1, nums.length - 1, target, nums) != -1){
                ans[1] = binarySearch(ans[1] + 1, nums.length - 1, target, nums);
            }else{
                break;
            }
        }
        return ans;
    }
    public int binarySearch(int left, int right, int target, int[] nums){
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] < target){
                left = mid + 1;
            }else{
                right = mid - 1;
            }
        }
        return -1;
    }
}


