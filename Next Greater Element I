The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.
You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.
Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.
Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] ans  = new int[nums1.length];
        int count = 0, greater = 0;
        for(int i = 0; i < ans.length; i++){
            count = 0;
            greater = 0;
            for(int j = 0; j < nums2.length; j++){
                if(nums2[j] == nums1[i]){
                    count++;
                }
                if(nums2[j] > nums1[i] && count > 0){
                    ans[i] = nums2[j];
                    greater++;
                    break;
                }
            }
            if(greater == 0){
                ans[i] = -1;
            }
        }
        return ans;
    }
}

import java.util.*;
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        HashMap <Integer, Integer> map = new HashMap <> ();
        Stack <Integer> stack = new Stack <> ();
        int[] ans = new int[nums1.length];

        for(int i = nums2.length - 1; i > -1; i--){
            if(stack.isEmpty()){
                map.put(nums2[i], -1);
            }else if(nums2[i] < stack.peek()){
                map.put(nums2[i], stack.peek());
            }else{
                while(!stack.isEmpty() && stack.peek() < nums2[i]) stack.pop();
                if(stack.isEmpty()){
                    map.put(nums2[i], -1);
                }else{
                    map.put(nums2[i], stack.peek());
                }
            }
             stack.push(nums2[i]);
        }
        for(int i = 0; i < ans.length; i++) ans[i] = map.get(nums1[i]);
        return ans;
    }
}
