Given the head of a linked list, return the list after sorting it in ascending order.
Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:
Input: head = []
Output: []

import java.util.*;
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        int size = 0;
        ListNode tempNode = head;
        while(tempNode != null){
            size++;
            tempNode = tempNode.next;
        }
        tempNode = head;
        int[] nums = new int[size];
        for(int i = 0; i < size; i++){
            nums[i] = tempNode.val;
            tempNode = tempNode.next;
        }
        tempNode = head;
        Arrays.sort(nums);
        for(int i = 0; i < size; i++){
            tempNode.val = nums[i];
            tempNode = tempNode.next;
        }
        return head;
    }
}
