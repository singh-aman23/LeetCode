Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.
Return the minimized largest sum of the split.
A subarray is a contiguous part of the array.

Example 1:
Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.

Example 2:
Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.
 
Constraints:
1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= k <= min(50, nums.length)

class Solution {
    public int splitArray(int[] nums, int k) {
        int left = nums[0], right = 0, mid = 0, ans = 0;
        for(int i = 0; i < nums.length; i++){
            left = Math.max(left, nums[i]);
            right += nums[i];
        }
       while(left <= right){
        mid = left + (right - left) / 2;
        if(canSplit(nums, k, mid)){
            ans = mid;
            right = mid - 1;
        }else{
            left = mid + 1;
        }
       }
        return ans;
    }

    private boolean canSplit(int[] nums, int k, int maxSum){
        int subArrayCount = 1, sum = 0;
        for(int i = 0; i < nums.length; i++){
            if(sum + nums[i] > maxSum){
                subArrayCount++;
                sum = nums[i];
                if(subArrayCount > k) return false;
            }else{
                sum += nums[i];
            }
        }

        return true;

    }
}
