Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.
Two nodes of a binary tree are cousins if they have the same depth with different parents.
Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.
Example 1:
Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:
Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:
Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
Constraints:
The number of nodes in the tree is in the range [2, 100].
1 <= Node.val <= 100
Each node has a unique value.
x != y
x and y are exist in the tree.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 import java.util.*;
 import java.util.LinkedList;

class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root == null){
            return false;
        }

        Queue <TreeNode> queue = new LinkedList <TreeNode> ();
        queue.add(root);

        int levelX = -1, levelY = -1, level = -1;
        TreeNode xNode = null, yNode = null;

        while(!queue.isEmpty()){

            int size = queue.size();
            level++;

            for(int i = 0; i < size; i++){
                TreeNode currNode = queue.remove();
                if(currNode.val == x){
                    levelX = level;
                    xNode = currNode;                    
                }
                if(currNode.val == y){
                    levelY = level;
                    yNode = currNode;
                }
                
                if(levelX != -1 && levelY != -1){
                    break;
                }

                if(currNode.left != null){
                    queue.add(currNode.left);
                }

                if(currNode.right != null){
                    queue.add(currNode.right);
                }
            }  

         }
        return (levelX == levelY) && (parent(root, xNode) != parent(root, yNode));
        }

        public TreeNode parent(TreeNode root, TreeNode childNode){
            if(root == null || childNode == null || root == childNode){
                return null;
            }

            if(root.left == childNode || root.right == childNode){
                return root;
            }

            TreeNode leftAns = parent(root.left, childNode);
            if(leftAns != null){
                return leftAns;
            }

            return parent(root.right, childNode);
        }
    }

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 import java.util.*;
 import java.util.LinkedList;

class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root == null){
            return false;
        }
        int levelX = -1, levelY = -1, level = -1;
        TreeNode parentX = null, parentY = null;

        Queue <TreeNode> queue = new LinkedList <TreeNode> ();
        queue.add(root);

        while(!queue.isEmpty()){
            int size = queue.size();
            level++;

            for(int i = 0; i < size; i++){
                TreeNode currNode = queue.remove();

                if(currNode.left != null){
                    if(currNode.left.val == x){
                    parentX = currNode;
                    levelX = level + 1; 
                    }

                    if(currNode.left.val == y){
                    parentY = currNode;
                    levelY = level + 1; 
                    }
                    queue.add(currNode.left);
                }

                if(currNode.right != null){
                    if(currNode.right.val == x){
                    parentX = currNode;
                    levelX = level + 1;
                    }
                    if(currNode.right.val == y){
                    parentY = currNode;
                    levelY = level + 1; 
                    }
                    queue.add(currNode.right);
                }

                if(levelX != -1 && levelY != -1){
                    break;
                }
            }
        }

        return (levelX == levelY) && (parentX != parentY);
    }
}
