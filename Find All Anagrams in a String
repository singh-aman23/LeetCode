Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.

import java.util.*;
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        HashMap <Character, Integer> fMap = new HashMap <> ();
        HashMap <Character, Integer> anagMap = new HashMap <> ();
        List <Integer> list = new ArrayList <> ();
        if(p.length() > s.length()) return list;
        int left = 0, right = p.length() - 1, count = 0;

        for(int i = 0; i < p.length(); i++){
            count = fMap.getOrDefault(p.charAt(i), 0);
            fMap.put(p.charAt(i), count + 1);
        }

        for(int i = left; i <= right; i++){
            count = anagMap.getOrDefault(s.charAt(i), 0);
            anagMap.put(s.charAt(i), count + 1);
        }

        while(right < s.length()){
            if (fMap.equals(anagMap)) {
                      list.add(left);
                }
            count = anagMap.get(s.charAt(left));
            anagMap.put(s.charAt(left), count - 1);
            if((anagMap.get(s.charAt(left)) == 0)) anagMap.remove(s.charAt(left));
            left++;
            right++;
            if(right < s.length()){
                anagMap.put(s.charAt(right), anagMap.getOrDefault(s.charAt(right), 0) + 1);
            }
        }
        return list;
    }
}
