Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.
Return the kth positive integer that is missing from this array.
 Example 1:
Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.
Example 2:
Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.

class Solution {
    public int findKthPositive(int[] arr, int k) {
       int count = 0, num = 1;

       while(count != k){
           if(binarySearch(arr,num) == -1){
               count++;
           }
           if(count == k){
                   return num;
            }
               num++;
       }
       return 0;
    }

    public int binarySearch(int[] arr, int target){
        int left = 0, right = arr.length - 1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(arr[mid] == target){
                return mid;
            }else if(arr[mid] < target){
                left = mid + 1;
            }else{
                right = mid - 1;
            }
        }
        return -1;
    }
}

import java.util.*;
class Solution {
    public int findKthPositive(int[] arr, int k) {
        HashSet <Integer> set = new HashSet <> ();
        int count = 0, num = 1;
        for(int i = 0; i < arr.length; i++){
            set.add(arr[i]);
        }

        while(count != k){
            if(!set.contains(num)){
                count++;
            }
            num++;
        }
        return num - 1;
        
        
    }
}
 
